{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jim's scratch pad.","text":"<p>Welcome. This repository serves as operational guides.</p>"},{"location":"#objectives","title":"Objectives:","text":"<ul> <li>Develop efficient, automated deployment pipelines to secure our infrastucture</li> <li>Provide engineering expertise, guidance and DevOps best practices to automate our service integration, delivery and daily operations landscape</li> <li>Prescribe technical strategy, direction, tooling, and automation approach for enabling a modern DevOps framework</li> </ul>"},{"location":"#principles","title":"Principles:","text":"<ul> <li>Make informed, data driven decisions</li> <li>Share ideas, communicate intent, work transparently, learn every day, rapidly experiment to validate assumptions and proactively get feedback</li> <li>Automate everything, document more</li> <li>Extract, measure, store and chart any and all metrics</li> <li>Zero blame culture. Iterate, improve and deliver together</li> <li>Shared Accountability. Every team member is responsible for the successes and failures of the team.</li> </ul>"},{"location":"A%20StyleGuide/writeup/","title":"Have a Heading","text":""},{"location":"A%20StyleGuide/writeup/#00-overview","title":"00 Overview","text":"<p>Have an overview. Say what is the objective of the steps you are enumerating, then, enumerate the steps. They should be a list, and have a 1 to 1 with the steps in the playbook.  Answer the questions: what is the task to be accomplished, and what will it take to complete the task? </p> <ul> <li>00 overview</li> <li>01 Objective of the Step</li> </ul>"},{"location":"A%20StyleGuide/writeup/#01-objective-of-the-step","title":"01 Objective of the Step","text":"<p>This can be a full explanation of the step. While the \"quick overview of Step\" gives you a quick handle in the overview on ---- ----&gt; </p> <p>that side of the page, this section gives you chance to give a more verbose explanation of the step youre trying to explain. </p> <p>in general, </p> <ol> <li>use a divider to separate the sections that are steps. </li> <li>enumerate the steps</li> <li>give an overview title with h2 heading</li> <li>give an explanation if its needed. </li> <li>give the code to run, indented as code, or \"block code fences\". That will provide a \"copy link\".</li> <li>give example output for the code that is run, BUT separated from the input code that produced it. format it as 'console output' or or \"block code fences\".</li> <li> <p>maybe a screen capture could be used in place of code and console output, if its manual steps. </p> <ul> <li>screencaps should be organized in the assets folder according to the page they are created for, not just a jumble of assets. </li> </ul> </li> <li> <p>video walkthroughs are extremely helpful. </p> </li> </ol> <p>obviously there will be places where this formatting wont work. we will cross that bridge when we come to it. Im just taking up space here, to see how the formatting works when rendered. it looks like maybe since and h6 heading is actually smaller than plain text, and text in code block fences, you can use it to denote a difference in the commands to run, and the output</p>"},{"location":"A%20StyleGuide/writeup/#run","title":"run:","text":"<pre><code>python3 this_is_the_code_to_run.py\n</code></pre>"},{"location":"A%20StyleGuide/writeup/#result","title":"result:","text":"<pre><code>    this will be the output\n\n    I think it might be helpful to denote that it is \"the result of code that has been \n    run\" , if you use the block code fence, and also indent within the code fence. \n</code></pre>"},{"location":"books/books/","title":"Books books overview","text":"<ul> <li>The Information James Gleik</li> <li>Why Information Grows </li> <li>A New Kind of Science</li> </ul>"},{"location":"kinds%20of%20compute/00_intro/","title":"kinds of compute","text":""},{"location":"kinds%20of%20compute/00_intro/#kinds-topics","title":"kinds topics","text":"<ul> <li>lambda </li> <li>turning </li> <li> <p>nots ands ors(actually, evertyhing is a nand.) but nands arent the only things that compute.</p> </li> <li> <p>cyclic tag systems</p> </li> <li>cellular automata (rule 110, game of life)</li> <li>pictures (interaction nets) https://gwern.net/doc/cs/algorithm/2008-changizi.pdf</li> <li>tilting 1</li> <li>tilting 2 (permtations)</li> <li>arrangement (https://chemlambda.github.io)</li> <li>mov is turing complete</li> <li>rotation 1 (holographic reduced representaitons, interference and phase cancellation )</li> <li> <p>rotation 2 (feedback, and resonance)</p> </li> <li> <p>randmoness (binary spatter codes, vsa, sdm, hyperdimensional vectors)</p> </li> <li>neural (htm, sdm, feedbackAndResonance revisited.)</li> <li>one bit turing complete ness: (golem?) (memory)(iota combinator)</li> </ul> <p>https://foulab.org/projects/legionlabs-and-strawdog/golem/ https://blog.wolfram.com/2007/10/24/the-prize-is-won-the-simplest-universal-turing-machine-is-proved/</p> <ul> <li>quantum (geometric algebra)</li> <li>interaction is computation</li> </ul> <pre><code>if a physics system can create a computer, \nthat i can then write a program to encode another computaitonal system, \nthat encodes and runs a prgram that follows all the same rules as physics, \nand use that simulated physics program to then encode a computer, \nisnt that initial physics system a computational system that gives the ability to run a program that can encode a computer? \n\nand in that case, arent atoms? \n\nand in that case, arent ALL interactions? \n</code></pre>"},{"location":"kinds%20of%20compute/00_intro/#secondary-topics","title":"secondary topics","text":"<ul> <li>distinguishability</li> <li>counterfactuals (science of can and cant)</li> <li>these arent the ony ones. there are others undiscovered and unrealised. </li> <li>emergence (computational systems that encode comutational systems) <pre><code>start with a computational system. it may have the possiblity to encode another computatonal system that depends on another kind of compute. \n\nand that new derived 2nd level computational system can then encode another computational system, and on and on. \n\nthis is  what quantum&gt;atomic&gt;chemical&gt;biological&gt;&gt;neural&gt;social&gt;cosmic&gt;ect.\n\nis doing. \n\nits not mysterious. its not magic. its computaiton. \n</code></pre></li> </ul>"},{"location":"kinds%20of%20compute/03_icons/","title":"03 icons","text":"<p>fontawesome-regular  </p> <p>fontawesome-solid  </p> <p>fontawesome-brands  </p> <p>material   LICENSE  </p> <p>octicons   LICENSE  </p> <p>simple   LICENSE.md  </p>"},{"location":"randomness%20facts/00_intro/","title":"random is a kind of pattern","text":"<ul> <li>kolmogorov</li> <li> <p>chaitin</p> </li> <li> <p>shannon</p> </li> <li>turing</li> <li> <p>godel</p> </li> <li> <p>https://www.ted.com/talks/stephan_dreiseitl_math_and_the_art_of_describing_randomness</p> </li> <li>https://www.youtube.com/watch?v=vVXbgbMp0oY</li> <li> <p>https://www.youtube.com/watch?v=H2lJLXS3AYM</p> </li> <li> <p>https://www.youtube.com/watch?v=Cj4Q_ldBTiM</p> </li> </ul>"},{"location":"z_trash/02_help/","title":"Documentation Features","text":"<p>Page last revised on: {{ git_revision_date }}</p> <pre><code>Requirements:\n\nmkdocs\nmkdocs-material\nplantuml-markdown\npymdown-extensions\npygments\nmkdocs-pdf-export-plugin\nfontawesome_markdown\nmkdocs-git-revision-date-plugin\n</code></pre> Summary <p>Here's some content.  <p></p> </p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p> </p>"},{"location":"z_trash/02_help/#mermaid-charts","title":"Mermaid Charts","text":"graph TD;     A--&gt;B;     A--&gt;C;     B--&gt;D;     C--&gt;D;"},{"location":"z_trash/02_help/#sequence-diagrams","title":"Sequence Diagrams","text":"sequenceDiagram Title: Here is a title A-&gt;B: Normal line B--&gt;C: Dashed line C-&gt;&gt;D: Open arrow D--&gt;&gt;A: Dashed open arrow"},{"location":"z_trash/02_help/#flowchart","title":"Flowchart","text":"graph LR   A[Start] --&gt; B{Error?};   B --&gt;|Yes| C[Hmm...];   C --&gt; D[Debug];   D --&gt; B;   B ----&gt;|No| E[Yay!];"},{"location":"z_trash/Account-Transition/writeup/","title":"Account permissions replicaiton pseudocode","text":""},{"location":"z_trash/Account-Transition/writeup/#00-overview","title":"00 Overview","text":"<p>Objective: given that </p> <ul> <li>Account A has users, </li> <li>and users are in groups, </li> <li>and groups enable access to userRoles</li> <li>and userRoles have permissions policies that can create serviceRoles and create/configre services </li> <li>and serviceRoles are assumed by services...</li> </ul> <p>and  - we could like those users, groups, userRoles, serviceRoles, services and permission broundaries reflected in Account B...</p> <p>these are the steps to execute that reflection</p>"},{"location":"z_trash/Account-Transition/writeup/#us","title":"US:","text":"<p>in Account A:  - get lists of users, groups, and roles (called enitities) - for each entity, get list of inline and managed policies - for each polciy, get polciy info (policy json)</p> <p>in account B:  - create all policies - create (if doesnt exist), users, groups, and roles - for each user, group, and role: attach policies </p> <p>-- in the console for Account A -- </p> <pre><code>for each userRole, and serviceRole use access analyzer to generate a policy (based on cloudtrail event history) that enables the minimum access\nthis creates a template that needs to be filled completed\n\nattach generated policy to role as permission boundary?\n</code></pre> <p>-- in the cli with credentials for Account A --  </p> <pre><code>users  = get list of users roles = get list of roles\ngroups = get list of groups\n\npolicies = { this is where policy names are accumulated}\n\nfor each user, get list of inline policies attached to user\nget list of managed polices attached to user\nget list of groups user is in.\n\nfor each group: get list of inline policies attached to group\nget list of managed polices attached to group\n\n\nfor each role\nget list of inline policies attached to role\nget list of managed polices attached to role\n(in the case of serviceRoles, this will include permisison boundary policies)\n\n\n\nfor each policy name that has been accumulated: get the role info\n(which includes the default version id, and the policy, as json)\n</code></pre> <p>-- in the cli with credentials for Account B -- </p> <pre><code>read in data ( from previous step ) for: users  roles groups policies\n\nfor policies: create policy (which includes policy json)\n\n\nfor entity in [users, groups, roles]: if entity doesnt exist: create entity\n\nattach all policies to entity\n(including permission boundaries)\n\n\nif user: add user to groups\n</code></pre>"},{"location":"z_trash/Account-Transition/writeup/#them","title":"THEM:","text":"<ul> <li>get list of resources (using tags) in Account A to be replicated in Account B</li> <li>for each resource in Account A, get confguration details (which includes the role that the resource is allowed to assume). </li> <li>create resource in Account B, pass role in Account B to resource. (the role already exists in Account B.)</li> </ul> <p>-- in the cli or with credentials for Account A -- </p> <pre><code>resources = (using tags and resource groups) get list of resources to replicate\n\nfor each resource, get the role that this resource is entitled to use\n</code></pre> <p>-- in the cli or with credentials for Account B -- </p> <pre><code>for each service: create service\npass appropraiate role from Account A to service in Account B\n</code></pre> <p>ex: </p> <pre><code>aws resource-groups list-groups\n</code></pre> <pre><code>aws lambda get-function --function-name arn:aws:lambda:&lt;region&gt;:&lt;account&gt;:function:&lt;functionName&gt;\n</code></pre>"},{"location":"z_trash/IAM-Roles/IAM/","title":"How use IAM in aws.","text":""},{"location":"z_trash/IAM-Roles/IAM/#00-overview","title":"00 Overview","text":"<ul> <li>01 Users</li> <li>02 Groups</li> <li> <p>03 Roles</p> <ul> <li>a. user Roles</li> <li>b. service Roles</li> </ul> </li> <li> <p>04 Roles: assuming userRoles to create serviceRoles</p> </li> <li>05 Example</li> </ul>"},{"location":"z_trash/IAM-Roles/IAM/#01-users","title":"01 Users","text":"<p>Users are added to the account with their email. </p> <p>Users need to enable multifactor authentication. </p>"},{"location":"z_trash/IAM-Roles/IAM/#02-groups","title":"02 Groups","text":"<p>Instead of adding permissions to each user, we add permissions to groups,  and then associate a user with a group. If a user is a member of a group,  that user has the permissions of the group. </p>"},{"location":"z_trash/IAM-Roles/IAM/#03-roles-assuming-roles","title":"03 Roles: Assuming roles","text":"<p>The role user is allowed to assume is based on the group the user is a member. For example if a user is present in the \"Automation_Platform_Build_Global_ServiceSRE_LS\" group, the user can assume the corresponding \"AP_LS_ServiceSRE_userRole\" role.</p> <p>It is reccommended by AWS use roles where ever possible,  since role based authentication is handled by time expiring tokens. </p> <p>We are enabling most permissions through roles. </p> <p>Roles are given permssions, and users assume a role in order to take on the abilites they need to accomplish tasks. </p>"},{"location":"z_trash/IAM-Roles/IAM/#to-assume-roles-in-the-console","title":"to assume Roles in the console:","text":"<p>The groups with the corresponding roles are as below:</p> Groups Corresponding roles Automation_Platform_Build_Global_ServiceSRE_APIC AP_APIC_ServiceSRE_userRole Automation_Platform_Build_Global_ServiceSRE_AppConnect AP_Appconnect_ServiceSRE_userRole Automation_Platform_Build_Global_PlatformSRE_AutoPlatform AP_Autoplatform_PlatformSRE_userRole Automation_Platform_Build_Global_ServiceSRE_AutoPlatform AP_Autoplatform_ServiceSRE_userRole Automation_Platform_Build_Global_Backup AP_Backup_userRole Automation_Platform_Build_Global_ServiceSRE_LS AP_LS_ServiceSRE_userRole <p>Follow these links to assume the appropiate role: </p> <p>AP_APIC_ServiceSRE_userRole</p> <p>AP_Appconnect_ServiceSRE_userRole</p> <p>AP_Autoplatform_Controlplane_userRole</p> <p>AP_Autoplatform_PlatformSRE_userRole</p> <p>AP_Autoplatform_ServiceSRE_userRole</p> <p>AP_Backup_userRole</p> <p>AP_LS_ServiceSRE_userRole</p> <p>AP_Rosa_minimumRequiredSCP_userRole</p>"},{"location":"z_trash/IAM-Roles/IAM/#to-assume-roles-in-the-aws-cli","title":"to assume Roles in the aws CLI","text":"<p>To configre your aws cli, you use <pre><code>aws configure\n</code></pre> However, if the following environment variables are set, aws cli will use those as credentials:  <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n</code></pre></p> <p>If these enviroment variables are not set, aws cli with use the credentials set up with \"aws configure\" BUT, to use the cli (with those credentials) you must get an MFA (multifactor authentication) session token. </p>"},{"location":"z_trash/IAM-Roles/IAM/#if-mfa-is-required-for-the-user-if-mfa-is-not-required-skip-this-part","title":"If MFA is required for the user: (If MFA is not required, skip this part. )","text":"<ul> <li>a. Get your user MFA device arn in the aws console. it is in the form : <pre><code>arn:aws:iam::&lt;accountNumber&gt;:mfa/&lt;userEmail&gt;\n</code></pre></li> <li>b. Get a MFA passkey from your MFA device. </li> <li>c. Use those values in the following:  <pre><code>aws sts get-session-token --serial-number &lt;MFA_device_arn&gt;  --token-code &lt;MFA_passkey_from_device&gt;\n</code></pre></li> <li>d. this will output temorary credentials  <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n</code></pre></li> <li>e. set these environment variables with the temprary credentials. . on MacOS, this is done with: </li> </ul> <p><pre><code>export AWS_ACCESS_KEY_ID=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SECRET_ACCESS_KEY=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SESSION_TOKEN=\"&lt; the_value_in_the_output &gt;\"\n</code></pre> - f. check whoami ( should be your email ):  <pre><code>aws sts get-caller-identity\n</code></pre> Now that you have MFA creds set, you can assume a role.</p>"},{"location":"z_trash/IAM-Roles/IAM/#get-temporary-tokens-for-role","title":"Get Temporary tokens for role:","text":"<ul> <li>a. run the follwing command:</li> </ul> <pre><code>aws sts assume-role --role-arn \"arn:aws:iam::&lt; account &gt;:role/&lt; role_to_assume &gt;_userRole\" --role-session-name &lt; AWSCLI-Session &gt; \n</code></pre> <ul> <li> <p>b. this will also output temorary credentials for: <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n</code></pre></p> </li> <li> <p>c. set these environemt variables with these NEW temprary credentials (which this time are for the role. on MacOS, this is done with:  <pre><code>export AWS_ACCESS_KEY_ID=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SECRET_ACCESS_KEY=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SESSION_TOKEN=\"&lt; the_value_in_the_output &gt;\"\n</code></pre></p> </li> <li> <p>e. check whoami ( should be the role to assume ):  <pre><code>aws sts get-caller-identity\n</code></pre></p> </li> </ul>"},{"location":"z_trash/IAM-Roles/IAM/#04-roles-assuming-userroles-to-create-serviceroles","title":"04 Roles: assuming userRoles to create serviceRoles","text":"<pre><code>user -&gt; ASSUMES -&gt; userRole\n\nuserRole -&gt; CREATES -&gt; serviceRole \n\nuserRole -&gt; CREATES -&gt; AWS_Service      &amp;&amp;     userRole -&gt; ASSIGN -&gt; AWS_Service( serviceRole )\n</code></pre> <p>We distinguish between 2 kinds of roles:  userRoles and serviceRoles.</p> <p>A user takes on a userRole, and creates a serviceRole for a service to assume. </p> <p>No service should be granted permission to assume a userRole. </p> <p>If a user assumes a userRole in order to create a serviceRole for a service,  that user has restrictions on the service role they can create. </p> <p>Both of the following must be true:  <pre><code>1. the serviceRole must be named following the role domain naming convention.\n    for example, \n    - if the user has assumed the role \"AP_Backup_userRole\"\n        when they create a service role, it should be named: \n        \"AP_Backup_serviceRole_&lt; choose_a_name &gt;\"\n            example: \n                \"AP_Backup_serviceRole_rds_393838\"\n\n    - if the user has assumed the role \"AP_APIC_ServiceSRE_userRole\"\n        when they create a service role, it should be named: \n        \"AP_APIC_ServiceSRE_serviceRole&lt; choose_a_name &gt;\"\n            example: \n                \"AP_APIC_ServiceSRE_serviceRole_console_reader_12\"\n\n\n2. the service must be created with the permission Boundary associated with the role domain. \n\n    for example, \n    - if the user has assumed the role \"AP_Backup_userRole\"\n        when they create a service role, it must be created with the permission Boundary called: \n        \"AP_Backup_permissionBoundary\"\n\n    - if the user has assumed the role \"AP_APIC_ServiceSRE_userRole\"\n        when they create a service role, it must be created with the permission Boundary called: \n        \"AP_APIC_ServiceSRE_permissionBoundary\"\n</code></pre></p> <p>If these 2 requirements are not met, the serviceRole cannot be created. </p> <p>Once a serviceRole is created, it can be passed to a service by the userRole in the provisioning and configuration of resources. </p>"},{"location":"z_trash/IAM-Roles/IAM/#05-walkthrough-example","title":"05 Walkthrough Example","text":"<p>click here </p>"},{"location":"z_trash/Jim-H/jim1/","title":"This is a place for Jim H to place docs.","text":"<p>keep this handy for JimH</p> <p>for now, here is a link to the security spec that Jim H set up:</p> <p>https://github.ibm.com/automation-saas/native-AWS</p>"},{"location":"z_trash/New-Service-Line/writeup/","title":"New Service Line","text":""},{"location":"z_trash/New-Service-Line/writeup/#00-overview","title":"00 Overview","text":"<p>Playbook for the steps that are nessicary to add a new service line. </p> <p>&amp; serviceID </p> <ul> <li>01 create policies for group, userRole, permissionBoundary. </li> <li>02 create group and userRole, attache policies</li> <li>03 add users to group</li> </ul>"},{"location":"z_trash/New-Service-Line/writeup/#01-create-policies-for-group-userrole-permissionboudary","title":"01 create policies for group, userRole, permissionBoudary.","text":"<p>Create a policy for the group. This will be where</p> <p>It should have thee following: - permission to assume userRole</p>"},{"location":"z_trash/New-Service-Line/writeup/#02-create-group-and-userrole-attache-policies","title":"02 create group and userRole, attache policies","text":""},{"location":"z_trash/New-Service-Line/writeup/#03-add-users-to-group","title":"03 add users to group","text":""},{"location":"z_trash/Script-Helpers/helpers_overview/","title":"Helpers Overview","text":""},{"location":"z_trash/Script-Helpers/helpers_overview/#00-overview","title":"00 Overview","text":"<p>this is where we will put the AWS versions of our script helpers. </p>"},{"location":"z_trash/Script-Helpers/helper-1/helper1_overview/","title":"Helper1 Overview","text":""},{"location":"z_trash/Script-Helpers/helper-1/helper1_overview/#00-overview","title":"00 Overview","text":"<p>example doc for a hypothetical helper</p>"},{"location":"z_trash/TODO/writeup/","title":"Have a Heading","text":""},{"location":"z_trash/TODO/writeup/#00-overview","title":"00 Overview","text":"<ul> <li>accesshub</li> <li>aws functionalID api key change</li> <li>bastian host setup</li> <li>dlc setup</li> <li>DLC connectivity troubleshooting</li> </ul>"},{"location":"z_trash/TODO/DLC%20connectivity%20troubleshooting/writeup/","title":"DLC connectivity troubleshooting","text":""},{"location":"z_trash/TODO/DLC%20connectivity%20troubleshooting/writeup/#00-overview","title":"00 Overview","text":"<ul> <li> <p>Enable access</p> <ul> <li>add user's public ip to bastion authorized keys: <ul> <li>cat ~/.ssh/id_rsa.pub</li> <li>add the output to bastion : <ul> <li>vi ~/.ssh/authroized_keys</li> </ul> </li> </ul> </li> <li>add user's ip to bastion security group</li> </ul> </li> <li> <p>create troubleshooting playbook</p> <ol> <li>check loadbalancer health</li> <li> <p>log in to instance and check dlc is running:</p> <ul> <li>sudo systemctl status dlc</li> <li>restart with: sudo systemctl restart dlc</li> </ul> </li> <li> <p>check instacne memory</p> </li> <li> <p>check logs, remove if nessicary</p> </li> <li> <p>reboot instance</p> </li> <li>rebuild instance.</li> </ol> </li> <li> <p>Automatically remove unneeded logs</p> </li> </ul>"},{"location":"z_trash/TODO/accesshub/writeup/","title":"Have a Heading","text":""},{"location":"z_trash/TODO/accesshub/writeup/#00-overview","title":"00 Overview","text":"<ul> <li>accesshub</li> <li>aws functionalID api key change</li> <li>bastian host setup</li> <li>dlc setup</li> <li>DLC connectivity troubleshooting</li> </ul>"},{"location":"z_trash/TODO/aws%20functionalID%20api%20key%20change/writeup/","title":"Have a Heading","text":""},{"location":"z_trash/TODO/aws%20functionalID%20api%20key%20change/writeup/#00-overview","title":"00 Overview","text":"<ul> <li>accesshub</li> <li>aws functionalID api key change</li> <li>bastian host setup</li> <li>dlc setup</li> <li>DLC connectivity troubleshooting</li> </ul>"},{"location":"z_trash/TODO/bastian%20host%20setup/writeup/","title":"Have a Heading","text":""},{"location":"z_trash/TODO/bastian%20host%20setup/writeup/#00-overview","title":"00 Overview","text":"<ul> <li>accesshub</li> <li>aws functionalID api key change</li> <li>bastian host setup</li> <li>dlc setup</li> <li>DLC connectivity troubleshooting</li> </ul>"},{"location":"z_trash/TODO/dlc%20setup/writeup/","title":"Have a Heading","text":""},{"location":"z_trash/TODO/dlc%20setup/writeup/#00-overview","title":"00 Overview","text":"<ul> <li>accesshub</li> <li>aws functionalID api key change</li> <li>bastian host setup</li> <li>dlc setup</li> <li>DLC connectivity troubleshooting</li> </ul>"},{"location":"z_trash/TroubleShooting/troubleshooting_overview/","title":"Overview","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#mfa","title":"MFA","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#asumming-roles-via-console","title":"asumming roles via console","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#asumming-roles-via-cli","title":"asumming roles via cli","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#using-roles-to-create-service-roles","title":"using roles to create service roles","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#trust-policys","title":"trust policys","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#differnce-between-user-roles-and-servce-roles","title":"differnce between USER roles and SERVCE roles","text":""},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#big-passrole-no-nos","title":"big \"passRole\" no-noS.","text":"<ul> <li>DO NOT give a servicerole permission to assume ADMIN roles or USER roles.</li> </ul>"},{"location":"z_trash/TroubleShooting/troubleshooting_overview/#rosa","title":"Rosa","text":"<ul> <li> <p>user logged in to aws, and rosa,          but cant run          <pre><code>rosa whoami\n</code></pre></p> <ul> <li>solution:      reset user's security credentials , logout and lock back in with rosa. </li> </ul> </li> </ul>"},{"location":"z_trash/rosa/writeup/","title":"aws rosa","text":""},{"location":"z_trash/rosa/writeup/#00-overview","title":"00 Overview","text":"<p>The role that is designated for use with rosa is:      AP_Rosa_minimumRequiredSCP_userRole</p> <p>The your rosa cli commands use whatever are your current the credentials for your aws cli.  in general the steps to get rosa right is: </p> <ul> <li>01 use aws cli to get session token for MFA session.  </li> <li>02 use aws cli to assume role \"AP_Rosa_minimumRequiredSCP_userRole\"</li> <li>03 make sure rosa is using the expected role. </li> <li>04 example</li> </ul>"},{"location":"z_trash/rosa/writeup/#01-use-aws-cli-to-get-session-token-for-mfa-session","title":"01 use aws cli to get session token for MFA session.","text":"<p>To configre your aws cli, you use <pre><code>aws configure\n</code></pre></p> <p>However, if the following environment variables are set, aws cli will use those as credentials:  <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n</code></pre></p> <p>If these enviroment variables are not set, aws cli with use the credentials set up with \"aws configure\" BUT, to use the cli (with those credentials) you must get an MFA (multifactor authentication) session token. </p> <ul> <li>a. Get your user MFA device arn in the aws console. it is in the form : <pre><code>arn:aws:iam::&lt;accountNumber&gt;:mfa/&lt;userEmail&gt;\n</code></pre></li> <li>b. Get a MFA passkey from your MFA device. </li> <li>c. Use those values in the following:  <pre><code>aws sts get-session-token --serial-number &lt;MFA_device_arn&gt;  --token-code &lt;MFA_passkey_from_device&gt;\n</code></pre></li> <li>d. this will output temorary credentials  <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n</code></pre></li> <li>e. set these environment variables with the temprary credentials. . on MacOS, this is done with: </li> </ul> <p><pre><code>export AWS_ACCESS_KEY_ID=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SECRET_ACCESS_KEY=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SESSION_TOKEN=\"&lt; the_value_in_the_output &gt;\"\n</code></pre> - f. check whoami ( should be your email ):  <pre><code>aws sts get-caller-identity\n</code></pre></p>"},{"location":"z_trash/rosa/writeup/#02-set-the-environment-variables-with-the-mfa-session-token-info","title":"02 set the environment variables with the MFA session token info.","text":"<p>Now that you have MFA creds set, you can assume the role \"AP_Rosa_minimumRequiredSCP_userRole\"</p> <ul> <li>a. run the follwing command:</li> </ul> <pre><code>aws sts assume-role --role-arn \"arn:aws:iam::530235354076:role/AP_Rosa_minimumRequiredSCP_userRole\" --role-session-name AWSCLI-Session\n</code></pre> <ul> <li>b. this will also output temorary credentials for: <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN\n</code></pre></li> <li> <p>c. set these environemt variables with these NEW temprary credentials (which this time are for the role \"AP_Rosa_minimumRequiredSCP_userRole\"). on MacOS, this is done with:  <pre><code>export AWS_ACCESS_KEY_ID=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SECRET_ACCESS_KEY=\"&lt; the_value_in_the_output &gt;\"\nexport AWS_SESSION_TOKEN=\"&lt; the_value_in_the_output &gt;\"\n</code></pre></p> </li> <li> <p>e. check whoami ( should be \"AP_Rosa_minimumRequiredSCP_userRole\" ):  <pre><code>aws sts get-caller-identity\n</code></pre></p> </li> </ul>"},{"location":"z_trash/rosa/writeup/#03-make-sure-rosa-is-using-the-expected-role","title":"03 make sure rosa is using the expected role.","text":""},{"location":"z_trash/rosa/writeup/#run","title":"run:","text":"<p><pre><code>rosa whoami\n</code></pre> if in the output the value for \"AWS ARN: \" is the arn for \"AP_Rosa_minimumRequiredSCP_userRole\",  then that means commands run against rosa will use the role \"AP_Rosa_minimumRequiredSCP_userRole\".</p>"},{"location":"z_trash/rosa/writeup/#04-walkthrough-example","title":"04 Walkthrough example","text":"<p>click here </p>"},{"location":"z_trash/rosa/writeup/#05-helpercode","title":"05 helpercode","text":"<p>this is the python helper code. </p> <p>copy the code to a new file. I will refer to the named file as \"aws_cli_MFA_helper.py\" edit the text \"&lt; your_aws_id &gt;\" ( at the end of the file).</p> <p>get an MFA key from your mfa device. </p> <p>run the following:  <pre><code>python3 aws_cli_MFA_helper.py &lt; key_from_MFA_device &gt;\n</code></pre></p> <p>the script will output 2 groups of text, all starting with \"export\".</p> <p>IF you want the aws cli to use your user credentials with MFA temporary credentials,  copy the 3 exports (after \"MFA Login keys: \") and paste them into the terminal window you want to use. </p> <p>else If you want to assume the \"AP_Rosa_minimumRequiredSCP_userRole\",  copy the 3 userRole exports ( after \"Assume Role Login keys: \")</p> <pre><code>import subprocess\n\nimport sys\nimport json\n\nimport os\n\ndef run_command(command, secrets=None):\n\n    cmd = command\n    # cmd = ' '.join(command)\n    p = subprocess.Popen(\n        cmd, shell=True,  # nosec (ignored by bandit)\n        stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n        universal_newlines=True\n    )\n    out, err = p.communicate()\n\n    if p.returncode != 0:\n        secrets = secrets or []\n        for s in secrets:\n            cmd = cmd.replace(s, '***')\n            out = out.replace(s, '***')\n            err = err.replace(s, '***')\n        raise RuntimeError(\n            \"Error while running '{}':\\noutput:\\n{}\\n\\nerror:\\n{}\".format(\n                cmd, out, err\n            )\n        )\n    return out\n\n\n\n\n\ninitialWarning = '''\n\nif the values for: \n    AWS_ACCESS_KEY_ID\n    AWS_SECRET_ACCESS_KEY\n    AWS_SESSION_TOKEN\n\nare set they are automatically used by the aws cli. \nif those values are old tokens, the cli will fail. \n\nthey need to be unset. \n\n\n\nunset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY\nunset AWS_SESSION_TOKEN\n\n'''\nprint(initialWarning)\n\n\ndef mfa_login(user, token):\n    # mfa_token = sys.argv[1]\n    device_arn = '\"arn:aws:iam::530235354076:mfa/'+ user+'\"'\n    mfa_token = token\n\n\n    mfa_token = \"aws sts get-session-token --serial-number {}  --token-code {}\".format( device_arn, mfa_token )\n\n    response = json.loads(run_command(mfa_token))\n\n\n    print(\"\")\n    print(\"MFA Login keys: \")\n    print()\n    print('export AWS_ACCESS_KEY_ID=\"'+ response[\"Credentials\"][\"AccessKeyId\"]+'\"')\n    print('export AWS_SECRET_ACCESS_KEY=\"'+ response[\"Credentials\"][\"SecretAccessKey\"]+'\"')\n    print('export AWS_SESSION_TOKEN=\"'+ response[\"Credentials\"][\"SessionToken\"]+'\"')\n\n\n\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = response[\"Credentials\"][\"AccessKeyId\"]\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = response[\"Credentials\"][\"SecretAccessKey\"]\n    os.environ[\"AWS_SESSION_TOKEN\"] = response[\"Credentials\"][\"SessionToken\"]\n\n\n\n\n\ndef assumeRole(role):\n    assume_role_command = 'aws sts assume-role --role-arn \"arn:aws:iam::530235354076:role/' +role +'\" --role-session-name AWSCLI-Session'\n    response = json.loads(run_command(assume_role_command))\n\n    print(\"\")\n    print(\"Assume Role Login keys: \")\n    print()\n    print('export AWS_ACCESS_KEY_ID=\"'+ response[\"Credentials\"][\"AccessKeyId\"]+'\"')\n    print('export AWS_SECRET_ACCESS_KEY=\"'+ response[\"Credentials\"][\"SecretAccessKey\"]+'\"')\n    print('export AWS_SESSION_TOKEN=\"'+ response[\"Credentials\"][\"SessionToken\"]+'\"')\n\n\n\n\nprint(sys.argv[1])\n\nmfa_login('&lt; your_aws_id &gt;', sys.argv[1])\nassumeRole(\"AP_Rosa_minimumRequiredSCP_userRole\")\n</code></pre>"},{"location":"z_trash/serviceLine%20Onboarding/onboarding/","title":"what we do","text":"<ul> <li>get service line to docuement service line name  <pre><code>   ex: ITOpsMgmt\n</code></pre></li> <li> <p>Get functional id <pre><code>   need imb id request links.\n   (to get an ibm email)\n</code></pre></p> </li> <li> <p>verify you can log into functional id email <pre><code>   log into root for the 1st time, \n   click, \n   forgot password, \n   then click email from verse account to reset  password  and \n   setup 2fa for root \n</code></pre></p> </li> <li> <p>set up groups force 2fa</p> </li> <li> <p>set up id's for local admins</p> </li> <li> <p>create groups.</p> </li> <li>create permisssion sets</li> <li> <p>link permission sets to accounts. <pre><code>   include awsAdmin\n   include platforSRE_AutoPlatform\n</code></pre></p> </li> <li> <p>create finctionalIDs  <pre><code>    serviceLine functional ID\n    cloudrock functional ID\n    argoCD functional ID\n    kataop functional id\n</code></pre></p> </li> </ul>"},{"location":"z_trash/serviceLine%20Onboarding/onboarding/#what-they-do","title":"what they do","text":"<ul> <li> <p>request fucntional ids for accounts</p> </li> <li> <p>request sso group adds for users</p> </li> <li> <p>send them aws roles and rosa docs</p> </li> </ul>"},{"location":"z_trash/serviceLineAddonConfig/writeup2/","title":"ServiceLine Addon config 2:","text":""},{"location":"z_trash/serviceLineAddonConfig/writeup2/#overview","title":"Overview:","text":"<p>Below is an overview of the general steps to complete.  </p> <p>ex:     https://github.ibm.com/automation-saas/asp-clusters/blob/master/CRs/dev/ap-cp-001.yaml</p>"},{"location":"z_trash/serviceLineAddonConfig/writeup2/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install LogForwarder addon if not installed &amp;&amp; wait for cluster to come back into a ready state (Config Below)</li> </ul> <pre><code>logforwarder:\n    config:\n        loglevel: info\n    enabled: true\n    secrets: {}\n</code></pre>"},{"location":"z_trash/serviceLineAddonConfig/writeup2/#if-security-addon-is-not-already-installed","title":"If security addon is NOT already installed","text":"<ul> <li>Make sure logforwarder addon is installed as mentioned above</li> <li>Be sure the cluster is ready</li> <li>Add to CR Spec with vpce from instructions below</li> <li> <p>wait for cluster to come back to ready</p> </li> <li> <p>in the serviceline CR         locate find security section <pre><code>security:\n    config:\n        syslogforwarder:\n            url: \"&lt;vpce_url&gt;:6514\"  &lt;---- this should be updated\n        enabled: true\n        secrets:\n            dlc-cert: dlc-cert\n            syslog-forwarder: syslog-forwarder\n</code></pre></p> </li> <li> <p>Find -sos-vpce <p>a. in the console, navigate to the vpc dashboard.  b. navigate to the \"Endpoints\" section c. select the endpoint with the corresponding serviceline name     ex:          if cluster is apic-d-j01         endpoint is apic-d-vpc-j01-sos-vpce</p> <p></p> <ol> <li>copy the FIRST available DNS name. </li> <li>update VPC Endpoint in syslogforwarder section </li> </ol>"},{"location":"z_trash/serviceLineAddonConfig/writeup2/#if-security-addon-was-previously-installed","title":"If security addon was previously installed","text":"<ul> <li> <p>set enabled false on the security addon <pre><code>security:\n    config:\n        syslogforwarder:\n            url: \"&lt;vpce_url&gt;:6514\"  \n        enabled: false   &lt;---- change this to \"false\"\n        secrets:\n            dlc-cert: dlc-cert\n            syslog-forwarder: syslog-forwarder\n</code></pre></p> </li> <li> <p>wait for cluster to come back to ready</p> </li> <li>change vpce to the one gathered above</li> </ul> <pre><code>security:\n    config:\n        syslogforwarder:\n            url: \"&lt;vpce_url&gt;:6514\"  &lt;---- this should be updated\n        enabled: false\n        secrets:\n            dlc-cert: dlc-cert\n            syslog-forwarder: syslog-forwarder\n</code></pre> <ul> <li>set enabled true on the security addon</li> </ul> <pre><code>security:\n    config:\n        syslogforwarder:\n            url: \"&lt;vpce_url&gt;:6514\"  \n        enabled: trues   &lt;---- change this to back to \"true\"\n        secrets:\n            dlc-cert: dlc-cert\n            syslog-forwarder: syslog-forwarder\n</code></pre> <ul> <li>wait for cluster to come back to ready</li> </ul>"}]}